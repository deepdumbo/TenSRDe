function [EE_Img]= TenSRDe_Accu( N_Img, O_Img, Y_Pre ,Par)
%%
[Height, Width, Band]  = size(N_Img);        
Average          = mean(permute(N_Img,[1,3,2]),3);                     
[Neighbor_arr, Num_arr, Self_arr] =	NeighborIndex(Average, Par);  

Y_clean_twist = permute(O_Img,[2,3,1]);
Y_noisy_twist = permute(N_Img,[2,3,1]);
Y_Pre_twist= permute(Y_Pre,[2,3,1]);

Y_new=Y_noisy_twist;
[n1,n2,n3] = size(Y_new);
n12 = min(n1,n2);
k_subspace=floor((Height*Width*Band)^(1/3)/(122*sqrt(Par.nSig/255)));
%%  Z Subproblem
[U,S,V]=tsvd(Y_Pre_twist);  
A = zeros(n1,n12,n3);  V_rec2 = zeros(n2,n12,n3);  S_rec2 = zeros(n12,n12,n3);
A(:,1:k_subspace,:) = U(:,1:k_subspace,:);
V_rec2(:,1:k_subspace,:) = V(:,1:k_subspace,:);
S_rec2(1:k_subspace,1:k_subspace,:) = S(1:k_subspace,1:k_subspace,:);
Z3= tprod(S_rec2,tran(V_rec2));
Y_deg=tprod(A,Z3);
%%
for iter = 1 : Par.Out_Iter 
    k_subspace = k_subspace+Par.delta*(iter-1);
    Band1=k_subspace;
    for inner_iter=1:Par.MaxIter
        %% Z-subproblem
        Z2=permute((tprod(tran(A),Y_new)+Par.rho*Z3)/(1+Par.rho),[3,2,1]);
        Z=Z2(:,:,1:k_subspace);
        Z22=permute(tprod(tran(A),Y_noisy_twist),[3,2,1]);
        N_Img1=Z22(:,:,1:k_subspace);
        EE_Img=Z;
        Lam=zeros(size(EE_Img));
        for in_iter=1:2      %% Solve Z by ADMM 
            E_Img=EE_Img-Lam/Par.gam;
            Average             =   mean(E_Img,3);
            [CurPat, Mat, Sigma_arr]	=	Cub2Patch( E_Img, N_Img1, Average, Par );
            if (mod(iter-1,2)==0)
                Par.patnum = Par.patnum - 10;                                         
                NL_mat  =  Block_matching(Mat, Par, Neighbor_arr, Num_arr, Self_arr);  
                if(iter==1)
                    Sigma_arr = Par.nSig * ones(size(Sigma_arr))*sqrt(k_subspace/Band);                     
                end
            end
            [Spa_EPat, Spa_W]    =  NLPatEstimation( NL_mat, Self_arr, Sigma_arr, CurPat, Par);
            [Spa_Img, Spa_Wei]   =  Patch2Cub( Spa_EPat, Spa_W, Par.patsize, Width, Band, Band1    );       
            E_Img = Spa_Img./Spa_Wei; 
            EE_Img=(Z+Par.gam*E_Img+Lam)/(1+Par.gam);
            Lam=Lam+Par.gam*(E_Img-EE_Img);
            Par.gam=Par.gam*1.1;
        end
        Z2(:,:,1:k_subspace) = EE_Img;
        Z_last=Z3;
        Z3=ipermute(Z2,[3,2,1]);  %% Z Denoising Result
        %% A Subproblem
        [U2,~,V2] = tsvd(tprod(Z3,tran(Y_new))+Par.rho*tran(A));
        A_last=A;
        A = tprod(V2,tran(U2));   %% A Denoising Result
        %% Update denoised Y
        Y_new = tprod(A,Z3);
        %% Results display
        [PSNR,SSIM,~,~] = evaluate(ipermute(Y_clean_twist,[2,3,1])/255,ipermute(Y_new,[2,3,1])/255,Height,Width);PSNR = mean(PSNR);SSIM = mean(SSIM);
        fprintf( 'Iter = %2.2f, PSNR = %2.3f, SSIM = %2.4f \n', iter, PSNR, SSIM);
        %% Convergence checking
%         Rel_Cha = norm(Z3(:)-Z_last(:))/norm(Z_last(:));
Rel_Cha = norm(Z(:)-Z_last(:))/norm(Z_last(:));
        if Rel_Cha < 0.1;%Par.eps        
            break;
        end     
    end
    %% Iterative Regularization
    if iter<Par.Out_Iter
        Y_new = (1-Par.theta)*Y_deg+Par.theta*Y_new;
    else
    end
end
EE_Img = ipermute(Y_new,[2,3,1])/255;
end

